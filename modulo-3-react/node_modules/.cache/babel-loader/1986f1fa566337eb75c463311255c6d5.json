{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/vero/Desktop/ADALAB/ejercicios-de-adalab/ejercicios-practica-vero/modulo-3-react/module-3-leccion-2.4-/src/components/App.js\",\n    _s = $RefreshSig$();\n\nimport '../styles/App.scss'; // Fichero src/components/App.js\n// Importamos useState desde React porque lo vamos a necesitar más abajo\n\nimport { useState } from 'react'; // Creamos la función o componente App. Esta vez lo creamos con una función arrow.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  // Creamos la constante de estado email y la función para modificarla setEmail.\n  // El valor inicial que va a tener email es un string vacío.\n  const [email, setEmail] = useState(''); // Creamos una función manejadora que se ejecutará cuando la usuaria cambie el input.\n\n  const handleEmail = ev => {\n    // Cogemos el valor del input.\n    const inputValue = ev.target.value; // Ejecutamos la función setEmail para actualizar el valor del estado email.\n    // Cuando ejecutamos la función setEmail, React guarda el valor del input en la constante email y re-renderiza la página.\n    // Esta función no la hemos creado nosotras, nos la ha creado React al utilizar el useState.\n\n    setEmail(inputValue);\n  }; // Retornamos todo el código HTML que queremos que React pinte en la página.\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Generador de emails:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Escribe un email:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"form__input-text\",\n          type: \"email\",\n          name: \"name\",\n          onChange: handleEmail\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Tu email es: \", email, \".\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Pulsa en \", /*#__PURE__*/_jsxDEV(\"a\", {\n        href: `mailto:${email}`,\n        children: email\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 18\n      }, this), \" para enviar un email.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"qu4bovk5U4+JuhY7vxbmswqixrc=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/mnt/c/Users/vero/Desktop/ADALAB/ejercicios-de-adalab/ejercicios-practica-vero/modulo-3-react/module-3-leccion-2.4-/src/components/App.js"],"names":["useState","App","email","setEmail","handleEmail","ev","inputValue","target","value"],"mappings":";;;AAAA,OAAO,oBAAP,C,CACA;AACA;;AACA,SAASA,QAAT,QAAyB,OAAzB,C,CAEA;;;;AACA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AAChB;AACA;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBH,QAAQ,CAAC,EAAD,CAAlC,CAHgB,CAKhB;;AACA,QAAMI,WAAW,GAAIC,EAAD,IAAQ;AAC1B;AACA,UAAMC,UAAU,GAAGD,EAAE,CAACE,MAAH,CAAUC,KAA7B,CAF0B,CAG1B;AACA;AACA;;AACAL,IAAAA,QAAQ,CAACG,UAAD,CAAR;AACD,GAPD,CANgB,CAehB;;;AACA,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA,6BACE;AAAA,qDAGE;AACE,UAAA,SAAS,EAAC,kBADZ;AAEE,UAAA,IAAI,EAAC,OAFP;AAGE,UAAA,IAAI,EAAC,MAHP;AAIE,UAAA,QAAQ,EAAEF;AAJZ;AAAA;AAAA;AAAA;AAAA,gBAHF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAFF,eAeE;AAAA,kCAAiBF,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA,YAfF,eAgBE;AAAA,2CAIW;AAAG,QAAA,IAAI,EAAG,UAASA,KAAM,EAAzB;AAAA,kBAA6BA;AAA7B;AAAA;AAAA;AAAA;AAAA,cAJX;AAAA;AAAA;AAAA;AAAA;AAAA,YAhBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAyBD,CAzCD;;GAAMD,G;;KAAAA,G;AA2CN,eAAeA,GAAf","sourcesContent":["import '../styles/App.scss';\n// Fichero src/components/App.js\n// Importamos useState desde React porque lo vamos a necesitar más abajo\nimport { useState } from 'react';\n\n// Creamos la función o componente App. Esta vez lo creamos con una función arrow.\nconst App = () => {\n  // Creamos la constante de estado email y la función para modificarla setEmail.\n  // El valor inicial que va a tener email es un string vacío.\n  const [email, setEmail] = useState('');\n\n  // Creamos una función manejadora que se ejecutará cuando la usuaria cambie el input.\n  const handleEmail = (ev) => {\n    // Cogemos el valor del input.\n    const inputValue = ev.target.value;\n    // Ejecutamos la función setEmail para actualizar el valor del estado email.\n    // Cuando ejecutamos la función setEmail, React guarda el valor del input en la constante email y re-renderiza la página.\n    // Esta función no la hemos creado nosotras, nos la ha creado React al utilizar el useState.\n    setEmail(inputValue);\n  };\n\n  // Retornamos todo el código HTML que queremos que React pinte en la página.\n  return (\n    <div>\n      <h1>Generador de emails:</h1>\n      <form>\n        <label>\n          Escribe un email:\n          {/* En esta línea indicamos que cuando cambie el input se ejecute la función manejadora handleEmail. */}\n          <input\n            className=\"form__input-text\"\n            type=\"email\"\n            name=\"name\"\n            onChange={handleEmail}\n          />\n        </label>\n      </form>\n      {/* En esta línea usamos la constante email para pintar el HTML. */}\n      <p>Tu email es: {email}.</p>\n      <p>\n        {/* En esta línea usamos la constante email para pintar la propiedad href del link. */}\n        {/* Estamos interpolando para conseguir que el valor de href sea algo como mailto:maria@gmail.com. */}\n        {/* También estamos usando la constante email para pintar el texto del link. */}\n        Pulsa en <a href={`mailto:${email}`}>{email}</a> para enviar un email.\n      </p>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}