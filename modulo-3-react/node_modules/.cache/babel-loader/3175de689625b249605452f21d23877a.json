{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/vero/Desktop/ADALAB/ejercicios-de-adalab/ejercicios-practica-vero/modulo-3-react/module-3-leccion-2.4-/src/components/App.js\",\n    _s = $RefreshSig$();\n\nimport '../styles/App.scss';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [number, setNumber] = useState(0);\n\n  const handleNumber = ev => {\n    const inputValue = ev.target.value;\n    number(inputValue);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Contador: \", number]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      children: \"Cambiar a 1\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"G5PFX1wnjBJODPcJAktOglW1raM=\");\n\n_c = App;\nexport default App; // Añade un botón a tu página que al pulsarlo incremente el valor del texto para que ponga Contador: 1.\n// Añade otra funcionalidad que quieras como por ejemplo:\n// Un botón para reducir el contador.\n// Un botón para resetear el contador.\n// const App = () => {\n//   // Creamos una función manejadora que se ejecutará cuando la usuaria cambie el input del primer número.\n//   const handleNumberA = (ev) => {\n//     // Cogemos el valor del input del primer número.\n//     const inputValue = ev.target.value;\n//     // Ejecutamos la función setNumberA para actualizar el valor del estado numberA.\n//     // Cuando ejecutamos la función setNumberA, React guarda el valor del input en la constante numberA y re-renderiza la página.\n//     // Esta función no la hemos creado nosotras, nos la ha creado React al utilizar el useState.\n//     setNumberA(inputValue);\n//   };\n//   // Creamos una función manejadora que se ejecutará cuando la usuaria cambie el input del segundo número.\n//   const handleNumberB = (ev) => {\n//     // Hacemos lo mismo que en la función manejadora anterior, pero con setNumberB y en una sola línea.\n//     setNumberB(ev.target.value);\n//   };\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/mnt/c/Users/vero/Desktop/ADALAB/ejercicios-de-adalab/ejercicios-practica-vero/modulo-3-react/module-3-leccion-2.4-/src/components/App.js"],"names":["useState","App","number","setNumber","handleNumber","ev","inputValue","target","value"],"mappings":";;;AAAA,OAAO,oBAAP;AACA,SAASA,QAAT,QAAyB,OAAzB;;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AAChB,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBH,QAAQ,CAAC,CAAD,CAApC;;AAEA,QAAMI,YAAY,GAAIC,EAAD,IAAQ;AAC3B,UAAMC,UAAU,GAAGD,EAAE,CAACE,MAAH,CAAUC,KAA7B;AACAN,IAAAA,MAAM,CAACI,UAAD,CAAN;AACD,GAHD;;AAKA,sBACE;AAAA,4BACE;AAAA,+BAAcJ,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD,CAdD;;GAAMD,G;;KAAAA,G;AAgBN,eAAeA,GAAf,C,CAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA","sourcesContent":["import '../styles/App.scss';\nimport { useState } from 'react';\n\nconst App = () => {\n  const [number, setNumber] = useState(0);\n\n  const handleNumber = (ev) => {\n    const inputValue = ev.target.value;\n    number(inputValue);\n  };\n\n  return (\n    <div>\n      <p>Contador: {number}</p>\n      <button type=\"button\">Cambiar a 1</button>\n    </div>\n  );\n};\n\nexport default App;\n\n// Añade un botón a tu página que al pulsarlo incremente el valor del texto para que ponga Contador: 1.\n// Añade otra funcionalidad que quieras como por ejemplo:\n// Un botón para reducir el contador.\n// Un botón para resetear el contador.\n\n// const App = () => {\n//   // Creamos una función manejadora que se ejecutará cuando la usuaria cambie el input del primer número.\n//   const handleNumberA = (ev) => {\n//     // Cogemos el valor del input del primer número.\n//     const inputValue = ev.target.value;\n//     // Ejecutamos la función setNumberA para actualizar el valor del estado numberA.\n//     // Cuando ejecutamos la función setNumberA, React guarda el valor del input en la constante numberA y re-renderiza la página.\n//     // Esta función no la hemos creado nosotras, nos la ha creado React al utilizar el useState.\n//     setNumberA(inputValue);\n//   };\n\n//   // Creamos una función manejadora que se ejecutará cuando la usuaria cambie el input del segundo número.\n//   const handleNumberB = (ev) => {\n//     // Hacemos lo mismo que en la función manejadora anterior, pero con setNumberB y en una sola línea.\n//     setNumberB(ev.target.value);\n//   };\n"]},"metadata":{},"sourceType":"module"}